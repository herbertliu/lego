#!/usr/bin/env node

var color = require('lego-colorful').color;
var path = require('path');
var program = require('commander');
var legorc = require('legorc');
var vfs = require('vinyl-fs');
var gulpTemplate = require('gulp-template');
var inquirer = require('inquirer');
var semver = require('semver');
var emptyDir = require('empty-dir').sync;
var category = require('../lib/client').category;
var log = require('lego-log');
var lego_category = require('lego-category');
var legoModify = require('lego-modify');
var fs = require('fs-extra');

// console.log(fs);

var NAME_REGEX = require('../lib/sdk/iduri').NAME_REGEX;


/*
  template directory
*/
var homeDir = process.env.HOME || process.env.USERPROFILE;
if (!homeDir) {
  homeDir = process.env.HOMEDRIVE + process.env.HOMEPATH;
}
var template = path.dirname(__dirname) + '/lib/template/';
template = template.replace(/^~/, homeDir);

/*
  program init
*/

program
  .usage('[options] name')
  .option('-r, --registry <url>', 'registry url of yuan server')

program.on('--help', function() {
  console.log();
  console.log('  Change init default template in ~/.lego/legorc');
  console.log();
  console.log(color.magenta('  [init]'));
  console.log('  template = ' + template);
  console.log();
});

program.parse(process.argv);

/*if (!emptyDir(process.cwd())) {
  console.warn(color.yellow('Existing files here, please run init command in an empty folder!'));
  return;
}
*/

var packageContent = {};
(function getPackage(){
  var packPath = './package.json';
  if(fs.existsSync(packPath)){
    try{
       packageContent = fs.readJsonSync(packPath/*,{encoding:'utf-8'}*/);
    }catch(e){

    }
  }
})();



var questions = [{
  message: 'Package name',
  name: 'name',
  default: packageContent.name || path.basename(process.cwd()),
  validate: function(input) {
    var done = this.async();
    if (!NAME_REGEX.test(input)) {
      console.warn(color.red('Must be only lowercase letters, numbers, dashes or dots, and start with lowercase letter.'));
      return;
    }
    done(true);
  }
}, {
  message: 'Version',
  name: 'version',
  default: packageContent.version || '0.0.1',
  validate: function(input) {
    var done = this.async();
    if (!semver.valid(input)) {
      console.warn(color.red('Must be a valid semantic version (semver.org).'));
      return;
    }
    done(true);
  }
}, {
  message: 'Description',
  name: 'description',
  default: packageContent.description || path.basename(process.cwd()),
}, {
  message: 'Author',
  name: 'author',
  default: (function(){
    var author = packageContent.author ;
    switch(Object.prototype.toString.call(author)){
      case "[object String]":
        return author;
      case "[object Object]":
        if(author.name || author.email){
          return author.name + ' ' + (author.email?'<'+ author.email +'>':'')
        }
        return '';
      case "[object Array]":
        author = author[0] || {};
        if(author.name || author.email){
          return author.name + ' ' + (author.email?'<'+ author.email +'>':'')
        }
        return '';
    }
    return '';
  })()|| require('whoami')
}];


var deleteQuestionsName = {} , currentCategory = 1 , currentCategoryName = '基础组件';//默认分类
function doInquirer(){
  console.log('Creating a lego package: ');
  inquirer.prompt(questions, function( answers ) {
    
    for(var i in deleteQuestionsName){
      if(deleteQuestionsName[i]){
        delete answers[i];
        delete deleteQuestionsName[i];
      }
    }

    //console.log(currentCategory);
    answers.category = currentCategory;
    answers.categoryName = currentCategoryName;

    answers.varName = answers.name.replace(/[\-\.](\w)/g, function(all, letter){
      return letter.toUpperCase();
    });
    answers.yuanUrl = legorc.get('registry');

    console.log('\n');

    console.log(answers);

    console.log('\n\n\n\n');

    inquirer.prompt([{
      type: "input",
      name: "askAgain",
      message: "Is this ok? (yes) ",
      default: 'yes'
    }],function(askAnswers){

      if(!askAnswers.askAgain.toLowerCase().match(/^((yes)|y)$/)){

        console.log('Aborted.');
        process.exit(2);

      }

      vfs.src(path.join(template, '**'), { dot: true })
      .pipe(gulpTemplate(answers))
      .pipe(legoModify(packageContent))
      .pipe(vfs.dest(function(file){
        var _path = file.path.split(path.sep);

        if(path.basename(file.path).toLowerCase() != "package.json"){
          var newPath , _index;
          if((_index = _path.indexOf("template")) >= 0){
            newPath = _path.slice(_index + 1) || [];
            newPath.unshift(".");
            newPath =  path.normalize(path.join.apply(path , newPath));
          }
          if(newPath && newPath != "." && fs.existsSync(newPath)){
            return './.tmp'
          }
        }
        return './' ;
      },{overwrite:true}))
      .on('end', function() {
        // https://github.com/npm/npm/issues/1862

        fs.removeSync('./.tmp');

        fs.move('./gitignore', './.gitignore' , {clobber:true} , function (err){});
        fs.move('./dlignore', './.dlignore' , {clobber:true} , function (err){});
        fs.move('./legoignore', './.legoignore', {clobber:true}, function (err){});
        fs.move('./travis.yml', './.travis.yml', {clobber:true}, function (err){});

        console.log();
        console.log(color.green('Initialize a lego package Succeccfully!'));
        console.log();
      });
    });

  });
}

function getQuestions(data  , parent , list){
  list = list || [];

  var dataKey = data.key , dataItem = data.item;

  var parentKey = parent && parent.key || 0;
  var _item = {
    type : 'list',
    name : 'category:' + data.key,
    //name : data.item
    message : !data.key?'Select category on the registry server :' : ('Select category within ' + data.item + ' :'),
    filter : function(value){
      currentCategory =  _item.__choices && _item.__choices[value] || dataKey;
      currentCategoryName = value;
      console.log(currentCategory , currentCategoryName);
      return value;
    }
  }

  
  if(parent){
    _item.when = function(answers){
      //console.log(answers , dataKey , parentKey , '=============');
      if(answers['category:' + parentKey] == dataItem){
        return true;
      }else{
        return false;
      }
    } 
  }
  

  var nextData = [];

  if(data.list){
    _item.choices = [];
    _item.__choices = {};
    data.list.forEach(function(value , i){
      _item.choices.push(value.item);

      _item.__choices[value.item] = value.key;

      if(value.list){
        nextData.push(value);
      }
    });
  }
  deleteQuestionsName[_item.name] = true;//存储需要删除的key
  list.push(_item);

  if(data.list){
    nextData.forEach(function(value , i){
      getQuestions(value  , data , list);
    });
  }

  return list;
}

function getCategory(){

  var myCategory = null;
  if(myCategory = lego_category.get('category')){
    try{
      myCategory = JSON.parse(myCategory);
      questions.push.apply(questions,getQuestions(myCategory));
    }catch(e){
      myCategory = null;
      log.warn('warn', 'A valid category should be something like Object {}');
    }
  }
  return myCategory;
}

function beginDoInquirer(){

  var myCategory = getCategory();

  if(myCategory){
    doInquirer();
  }else{
    console.log('Loading the category on the registry server：\n');
  }

  category({
    registry: program.registry
  }, function(err , data) {

    var flag = false;
    if (err || !data || !data.list) {

      // log.error('exit', err.message);
      // console.log();
      //process.exit(2);
    }else{

      flag = true;
      if(!myCategory){
        questions.push.apply(questions,getQuestions(data));
      }

    }

    if(!myCategory){      
      doInquirer();    
    }
    
    if(flag){
      var _category = '';
      try{
        _category = JSON.stringify(data);
      }catch(e){
        log.warn('warn', 'A valid category should be something like Object {}');
      }

      lego_category.set('category' , _category);
    }

  });

}

beginDoInquirer();



